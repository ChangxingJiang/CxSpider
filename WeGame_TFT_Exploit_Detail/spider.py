"""
WeGame云顶之弈比赛记录爬虫：游戏场次详情

需要第三方模块：
Utils4R >= 0.0.2

@author: ChangXing
@version: 2.1
@create: 2019.12.10
@revise: 2020.06.09
"""

import json
import time

import crawlertool as tool
import requests

from . import setting


class SpiderTftExploitDetail(tool.abc.SingleSpider):
    def running(self, exploit_id, endtime, user_id, mysql):
        # 请求召唤师比赛记录
        headers = {"Accept-Encoding": "gzip",
                   "Host": "mlol.qt.qq.com",
                   "Connection": "Keep-Alive",
                   "user-agent": "okhttp/3.12.0"}
        cookies = dict(l_uin="o13578660",
                       p_uin="o13578660",
                       uin="o13578660",
                       skey=setting.SKEY)
        response = requests.get(
            url="https://mlol.qt.qq.com/gorpc/exploit/exploit/query_exploit_detail/proxy",
            params={
                "exploit_id": exploit_id,
                "game_area": "1",
                "scene": "tft_mlol",
                "user_id": user_id,
                "endtime": endtime,
                "plat": "android",
                "version": "9914"
            },
            headers=headers,
            cookies=cookies,
            verify=False)
        # print(response.content.decode("UTF-8"))
        exploit = response.json()

        if "info" not in exploit:
            print("Missing: info")
            return False
        if "exploit_detail" not in exploit["info"]:
            print("Missing: info - exploit_detail")
            return False
        if exploit["info"]["exploit_detail"] is None:
            print("Missing: info - exploit_detail - is None")
            return False
        if "exploit_id" not in exploit["info"]["exploit_detail"]:
            print("Missing: info - exploit_detail - exploit_id")
            return False
        if "end_time" not in exploit["info"]["exploit_detail"]:
            print("Missing: info - exploit_detail - end_time")
            return False
        if "game_match_type" not in exploit["info"]["exploit_detail"]:
            print("Missing: info - exploit_detail - game_match_type")
            return False
        if "duration" not in exploit["info"]["exploit_detail"]:
            print("Missing: info - exploit_detail - duration")
            return False
        if "specific_user_exploit" not in exploit["info"]["exploit_detail"]:
            print("Missing: info - exploit_detail - specific_user_exploit")
            return False
        if "buff_version" not in exploit["info"]["exploit_detail"]["specific_user_exploit"]:
            print("Missing: info - exploit_detail - specific_user_exploit - buff_version")
            return False
        if "member_exploit_list" not in exploit["info"]["exploit_detail"]:
            print("Missing: info - exploit_detail - member_exploit_list")
            return False

        member_list = [{} for _ in range(8)]
        member_info_list = [[] for _ in range(8)]

        for member_exploit in exploit["info"]["exploit_detail"]["member_exploit_list"]:
            if "user_id" not in member_exploit:
                print("Missing: info - exploit_detail - member_exploit_list - - user_id")
                return False
            if "nickname" not in member_exploit:
                print("Missing: info - exploit_detail - member_exploit_list - - nickname")
                return False
            if "ranking" not in member_exploit:
                print("Missing: info - exploit_detail - member_exploit_list - - ranking")
                return False
            if "piece_list" not in member_exploit:
                print("Missing: info - exploit_detail - member_exploit_list - - piece_list")
                return False
            if "game_rank_list" not in member_exploit:
                print("Missing: info - exploit_detail - member_exploit_list - - game_rank_list")
                return False
            if "full_rank_title" not in member_exploit["game_rank_list"][0]:
                print("Missing: info - exploit_detail - member_exploit_list - - game_rank_list - full_rank_title")
                return False

            ranking = int(member_exploit["ranking"])
            if ranking < 1 or ranking > 8:
                return False

            member_list[ranking - 1] = {
                "user_id": member_exploit["user_id"],
                "nickname": member_exploit["nickname"],
                "rank_title": member_exploit["game_rank_list"][0]["full_rank_title"]
            }

            if member_exploit["piece_list"] is None:
                print("Missing: info - exploit_detail - member_exploit_list - - piece_list - is None")
                continue

            for piece in member_exploit["piece_list"]:
                if "star_num" not in piece:
                    print("Missing: info - exploit_detail - member_exploit_list - - piece_list - - star_num")
                    return False
                if "hero_name" not in piece:
                    print("Missing: info - exploit_detail - member_exploit_list - - piece_list - - hero_name")
                    return False
                member_info_list[ranking - 1].append([
                    piece["hero_name"],
                    piece["star_num"]
                ])

        exploit_write = list()
        exploit_write.append({
            "exploit_id": exploit["info"]["exploit_detail"]["exploit_id"],
            "end_time": exploit["info"]["exploit_detail"]["end_time"],
            "game_match_type": exploit["info"]["exploit_detail"]["game_match_type"],
            "duration": exploit["info"]["exploit_detail"]["duration"],
            "version": exploit["info"]["exploit_detail"]["specific_user_exploit"]["buff_version"],
            "member_list": json.dumps(member_list, ensure_ascii=False),
            "member_1": json.dumps(member_info_list[0], ensure_ascii=False),
            "member_2": json.dumps(member_info_list[1], ensure_ascii=False),
            "member_3": json.dumps(member_info_list[2], ensure_ascii=False),
            "member_4": json.dumps(member_info_list[3], ensure_ascii=False),
            "member_5": json.dumps(member_info_list[4], ensure_ascii=False),
            "member_6": json.dumps(member_info_list[5], ensure_ascii=False),
            "member_7": json.dumps(member_info_list[6], ensure_ascii=False),
            "member_8": json.dumps(member_info_list[7], ensure_ascii=False),
            "period": setting.PERIOD
        })

        print("写入数据成功...")
        print("游戏版本:", exploit["info"]["exploit_detail"]["specific_user_exploit"]["buff_version"])

        mysql.insert("exploit", exploit_write)


def crawler(mysql):
    exploit_list = mysql.select("exploit_list", ["exploit_id", "end_time", "user_id"],
                                sql_where="WHERE `period`=" + str(setting.PERIOD) + " GROUP BY exploit_id")

    spider = SpiderTftExploitDetail()

    num = 1
    for exploit in exploit_list:

        end_time = time.localtime(exploit[1])
        end_time_str = time.strftime("%Y-%m-%d %H:%M:%S", end_time)
        print("抓取阵容:", num, "/", len(exploit_list), ";", exploit[0], end_time_str)

        num += 1

        try:
            print("抓取结果:", spider.running(exploit[0], exploit[1], exploit[2], mysql))
        except Exception:
            print("抓取失败，运行报错")

        time.sleep(2)


if __name__ == "__main__":
    crawler(tool.db.MySQL(host="", user="", password="", database=""))
